Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for traffic-tracker
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Resources:
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: Timestamp
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub "{Environment}-traffic-tracker"
  FetchFeedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FetchFeedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetch_feed.main.handler
      Runtime: python3.9
      CodeUri: ../fetch_feed/build
      Role: !GetAtt FetchFeedRole.Arn
      MemorySize: 128
      Timeout: 180
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: state-machine-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: LambdaStatement
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt FetchFeedFunction.Arn
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${Environment}-traffic-tracker'
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "States": {
            "FetchFeed": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$",
              "Parameters": {
                "FunctionName": "${FetchFeedFunction.Arn}"
              },
              "End": true
            }
          },
          "StartAt": "FetchFeed"
        }
