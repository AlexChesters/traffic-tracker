Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for traffic-tracker
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Resources:
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: Timestamp
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub "${Environment}-traffic-tracker"
  FetchFeedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FetchFeedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetch_feed.main.handler
      Runtime: python3.9
      CodeUri: ../fetch_feed/build
      Role: !GetAtt FetchFeedRole.Arn
      MemorySize: 128
      Timeout: 180
  AdaptItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  AdaptItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: adapt_item.main.handler
      Runtime: python3.9
      CodeUri: ../adapt_item/build
      Role: !GetAtt AdaptItemRole.Arn
      MemorySize: 128
      Timeout: 15
  WriteToTableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: dynamo-policy
          PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:PutItem
                Resource: !GetAtt Table.Arn
                Effect: Allow
  WriteToTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: write_to_table.main.handler
      Runtime: python3.9
      CodeUri: ../write_to_table/build
      Role: !GetAtt WriteToTableRole.Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: state-machine-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: LambdaStatement
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt FetchFeedFunction.Arn
                  - !GetAtt AdaptItemFunction.Arn
                  - !GetAtt WriteToTableFunction.Arn
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${Environment}-traffic-tracker'
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "States": {
            "FetchFeed": {
              "Type": "Task",
              "Resource": "${FetchFeedFunction.Arn}",
              "ResultPath": "$.feed",
              "OutputPath": "$.feed",
              "Next": "AdaptItems"
            },
            "AdaptItems": {
              "Type": "Map",
              "InputPath": "$.results",
              "ResultPath": "$.results",
              "OutputPath": "$",
              "MaxConcurrency": 2,
              "Next": "WriteToTable",
              "Iterator": {
                "StartAt": "AdaptItem",
                "States": {
                  "AdaptItem": {
                    "Type": "Task",
                    "Resource": "${AdaptItemFunction.Arn}",
                    "End": true
                  }
                }
              }
            },
            "WriteToTable": {
              "Type": "Task",
              "Resource": "${WriteToTableFunction.Arn}",
              "InputPath": "$",
              "End": true
            }
          },
          "StartAt": "FetchFeed"
        }
  StateMachineScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: step-function-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Action: states:StartExecution
                  Effect: Allow
                  Resource: !Ref StateMachine
  StateMachineSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Invoke in the early hours of each morning
      ScheduleExpression: cron(0 * * * ? *)
      State: ENABLED
      Targets:
        - Id: StateMachine
          Arn: !Ref StateMachine
          RoleArn: !GetAtt StateMachineScheduleRole.Arn
