Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for traffic-tracker
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Mappings:
  EnvironmentMap:
    test:
      WEBSITEBUCKET: projects-test-bucket-bucket-fmse77ttyujy
      UPLOADROLE: arn:aws:iam::008356366354:role/projects-test-bucket-BucketUploadRole-1KY87JZ8HN0J9
    live:
      WEBSITEBUCKET: projects-live-bucket-bucket-llkgmktc4xmo
      UPLOADROLE: arn:aws:iam::008356366354:role/projects-live-bucket-BucketUploadRole-1USRJUF87S00F
Resources:
  StateMachineInterimBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: expire-all-objects-after-3-days
            Status: Enabled
            ExpirationInDays: 3
          - Id: abort-incomplete-multipart-uploads-after-3-days
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - !ImportValue core-infrastructure-global-codebuild-base-policy-arn
      Policies:
        - PolicyName: traffic-tracker-website-policy
          PolicyDocument:
            Statement:
              - Action:
                  - sts:AssumeRole
                  - sts:TagSession
                Effect: Allow
                Resource: !FindInMap [EnvironmentMap, !Ref Environment, UPLOADROLE]
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Sub "{StateMachineInterimBucket.Arn}/*"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 5
      Description: Builds traffic-tracker's website
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
            - Name: PROJECT_NAME
              Value: !Sub "${Environment}-traffic-tracker-website"
              Type: PLAINTEXT
            - Name: BUCKET
              Value: !FindInMap [EnvironmentMap, !Ref Environment, WEBSITEBUCKET]
              Type: PLAINTEXT
            - Name: UPLOAD_ROLE
              Value: !FindInMap [EnvironmentMap, !Ref Environment, UPLOADROLE]
              Type: PLAINTEXT
      Name: !Sub "${Environment}-traffic-tracker-website"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: GITHUB
        Auth:
          Type: OAUTH
        Location: https://github.com/AlexChesters/traffic-tracker.git
        BuildSpec: website/buildspec.yml
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: Timestamp
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub "${Environment}-traffic-tracker"
  FetchFeedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FetchFeedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetch_feed.main.handler
      Runtime: python3.9
      CodeUri: ../fetch_feed/build
      Role: !GetAtt FetchFeedRole.Arn
      MemorySize: 128
      Timeout: 180
  AdaptItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  AdaptItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: adapt_item.main.handler
      Runtime: python3.9
      CodeUri: ../adapt_item/build
      Role: !GetAtt AdaptItemRole.Arn
      MemorySize: 128
      Timeout: 15
  WriteToTableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: dynamo-policy
          PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:PutItem
                Resource: !GetAtt Table.Arn
                Effect: Allow
  WriteToTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: write_to_table.main.handler
      Runtime: python3.9
      CodeUri: ../write_to_table/build
      Role: !GetAtt WriteToTableRole.Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
  ReadFromTableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: read-from-table-policy
          PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:Scan
                Resource: !GetAtt Table.Arn
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource: !Sub "${StateMachineInterimBucket.Arn}/*"
                Effect: Allow
  ReadFromTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_from_table.main.handler
      Runtime: python3.9
      CodeUri: ../read_from_table/build
      Role: !GetAtt ReadFromTableRole.Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          BUCKET_NAME: !Ref StateMachineInterimBucket
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: state-machine-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: lambda:InvokeFunction
                  Resource:
                    - !GetAtt FetchFeedFunction.Arn
                    - !GetAtt AdaptItemFunction.Arn
                    - !GetAtt WriteToTableFunction.Arn
                    - !GetAtt ReadFromTableFunction.Arn
                - Effect: Allow
                  Action:
                    - codebuild:StartBuild
                    - codebuild:StopBuild
                    - codebuild:BatchGetBuilds
                  Resource:
                    - !GetAtt CodeBuildProject.Arn
                - Effect: Allow
                  Action:
                    - events:PutTargets
                    - events:PutRule
                    - events:DescribeRule
                  Resource:
                    - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventForCodeBuildStartBuildRule'
  StateMachineScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: step-function-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Action: states:StartExecution
                  Effect: Allow
                  Resource: !Ref StateMachine
  StateMachineSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Invoke every hour on the hour
      ScheduleExpression: cron(0 * * * ? *)
      State: ENABLED
      Targets:
        - Id: StateMachine
          Arn: !Ref StateMachine
          RoleArn: !GetAtt StateMachineScheduleRole.Arn
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${Environment}-traffic-tracker'
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "States": {
            "FetchFeed": {
              "Type": "Task",
              "Resource": "${FetchFeedFunction.Arn}",
              "ResultPath": "$.feed",
              "OutputPath": "$.feed",
              "Next": "AdaptItems"
            },
            "AdaptItems": {
              "Type": "Map",
              "InputPath": "$.results",
              "ResultPath": "$.results",
              "OutputPath": "$",
              "MaxConcurrency": 2,
              "Next": "WriteToTable",
              "Iterator": {
                "StartAt": "AdaptItem",
                "States": {
                  "AdaptItem": {
                    "Type": "Task",
                    "Resource": "${AdaptItemFunction.Arn}",
                    "End": true
                  }
                }
              }
            },
            "WriteToTable": {
              "Type": "Task",
              "Resource": "${WriteToTableFunction.Arn}",
              "InputPath": "$",
              "ResultPath": null,
              "OutputPath": "$",
              "Next": "ReadFromTable"
            },
            "ReadFromTable": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "InputPath": "$",
              "ResultPath": "$.full_results",
              "OutputPath": "$.full_results",
              "Next": "PublishWebsite",
              "Parameters": {
                "FunctionName": "${ReadFromTableFunction.Arn}",
                "Payload": {
                  "ExecutionId.$": "$$.Execution.Id"
                }
              }
            },
            "PublishWebsite": {
              "Type": "Task",
              "Resource": "arn:aws:states:::codebuild:startBuild.sync",
              "InputPath": "$.Payload",
              "End": true,
              "Parameters": {
                "ProjectName": "${CodeBuildProject}",
                "EnvironmentVariablesOverride": [
                  {
                    "Name": "DATA_BUCKET_NAME",
                    "Value.$": "$.bucket_name",
                    "Type": "PLAINTEXT"
                  },
                  {
                    "Name": "DATA_FILE_KEY",
                    "Value.$": "$.key",
                    "Type": "PLAINTEXT"
                  }
                ]
              }
            }
          },
          "StartAt": "FetchFeed"
        }
